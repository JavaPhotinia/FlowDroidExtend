<javax.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.String getHeader(java.lang.String)> -> _SOURCE_
<net.logstash.logback.marker.Markers: net.logstash.logback.marker.LogstashMarker appendEntries(java.util.Map)> -> _BOTH_
<cn.hutool.json.JSONUtil: cn.hutool.json.JSON parse(java.lang.Object)> -> _BOTH_
<synthetic.method.HttpServletRequestImpl: void <init>()> -> _SOURCE_
<synthetic.method.HttpServletResponseImpl: void <init>()> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession()> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: javax.servlet.http.HttpSession getSession()> -> _SOURCE_
<org.springframework.security.core.context.SecurityContext: org.springframework.security.core.Authentication getAuthentication()> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteUser()> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.String getRemoteUser()> -> _SOURCE_
<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()> -> _SOURCE_
<co.yiiu.pybbs.controller.front.IndexController: java.lang.String getemail()> -> _SOURCE_
<co.yiiu.pybbs.controller.front.IndexController: java.lang.String getcode()> -> _SOURCE_
<me.zhyd.oauth.model.AuthUser: java.lang.String getEmail()> -> _SOURCE_
<me.zhyd.oauth.model.AuthToken: java.lang.String getAccessToken()> -> _SOURCE_
<co.yiiu.pybbs.controller.front.IndexController: java.lang.String getkeyword()> -> _SOURCE_
<me.zhyd.oauth.model.AuthToken: java.lang.String getAccessToken()> -> _SOURCE_

<org.springframework.security.config.http.CsrfBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getCsrfLogoutHandler)> -> _SOURCE_
<org.springframework.security.config.authentication.CachingUserDetailsService: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)> -> _SOURCE_
<org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper: org.springframework.security.core.userdetails.UserDetails loadUserDetails(org.springframework.security.core.Authentication)> -> _SOURCE_
<java.io.File: java.io.File getAbsoluteFile)> -> _SOURCE_
<org.apache.commons.jxpath.ri.parser.XPathParser: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginPage)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String getRealPath(java.lang.String)> -> _SOURCE_
<com.google.auth.oauth2.UserCredentials: java.lang.String getClientSecret)> -> _SOURCE_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createQueryString(java.util.List,java.util.Set,boolean)> -> _SOURCE_
<org.springframework.messaging.simp.stomp.StompDecoder: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl)> -> _SOURCE_
<java.io.File: java.io.File getCanonicalFile)> -> _SOURCE_
<org.apache.commons.jxpath.ri.JXPathContextReferenceImpl: java.lang.Object getValue(java.lang.String)> -> _SOURCE_
<org.apache.xmlrpc.webserver.RequestData: java.lang.String getMethod)> -> _SOURCE_
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentials(com.google.api.client.http.HttpTransport)> -> _SOURCE_
<org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.springframework.util.DefaultPropertiesPersister: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.owasp.webgoat.plugins.Plugin: void loadFiles(java.nio.file.Path)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletResponseImpl: java.lang.String getHeader(java.lang.String)> -> _SOURCE_
<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentialsFromCode(java.lang.String,java.net.URI)> -> _SOURCE_
<org.dmfs.oauth2.client.http.requests.ResourceOwnerPasswordTokenRequest: org.dmfs.httpclient.HttpRequestEntity requestEntity)> -> _SOURCE_
<org.owasp.webgoat.util.HtmlEncoder: java.lang.String decode(java.lang.String)> -> _SOURCE_
<javax.naming.ldap.Rdn: java.lang.Object unescapeValue(java.lang.String)> -> _SOURCE_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl getConfig(javax.servlet.http.HttpServletRequest)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parsePostData(java.util.Map,java.io.InputStream,java.lang.String)> -> _SOURCE_
<org.springframework.security.concurrent.DelegatingSecurityContextExecutorService: java.util.concurrent.ExecutorService getDelegate)> -> _SOURCE_
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.HeadersConfigurer headers)> -> _SOURCE_
<org.springframework.web.servlet.tags.EscapeBodyTag: java.lang.String readBodyContent)> -> _SOURCE_
<org.springframework.web.util.UrlPathHelper: java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)> -> _SOURCE_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder requestAttr(java.lang.String,java.lang.Object)> -> _SOURCE_
<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentials(java.lang.String)> -> _SOURCE_
<org.springframework.web.socket.sockjs.transport.handler.JsonpReceivingTransportHandler: java.lang.String[] readMessages(org.springframework.http.server.ServerHttpRequest)> -> _SOURCE_
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentialsUnsynchronized(com.google.api.client.http.HttpTransport)> -> _SOURCE_
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginProcessingUrl)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String readLine(byte[])> -> _SOURCE_
<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getLogoutRequestMatcher(java.lang.String)> -> _SOURCE_
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.util.List getLogoutHandlers)> -> _SOURCE_
<org.apache.xmlrpc.webserver.RequestData: java.lang.String getHttpVersion)> -> _SOURCE_
<com.novell.ldap.rfc2251.RfcFilter: byte[] unescapeString(java.lang.String)> -> _SOURCE_
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> -> _SOURCE_
<com.google.auth.oauth2.DefaultCredentialsProvider: java.io.File getWellKnownCredentialsFile)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parseParameters)> -> _SOURCE_
<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)> -> _SOURCE_

<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()> -> _SOURCE_


<java.net.URL: java.io.InputStream openStream()> -> _BOTH_
<java.net.URL: java.lang.Object getContent()> -> _BOTH_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _BOTH_

<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_

% Covered by the EasyTaintWrapper given that the HttpEntity is tainted
%<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> -> _SOURCE_

<org.springframework.boot.autoconfigure.mail.MailProperties: java.lang.String getPassword()> -> _SOURCE_
<org.springframework.web.multipart.MultipartFile: java.lang.String getOriginalFilename()> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.util.Map getParameterMap()> -> _SOURCE_
<redis.clients.jedis.Jedis: java.lang.String set(java.lang.String,java.lang.String,redis.clients.jedis.params.SetParams)> -> _SOURCE_
<com.alibaba.fastjson.JSONObject: java.lang.String toJSONString(java.lang.Object)> -> _SOURCE_

% SpringBlog
<com.raysmond.blog.controllers.PostController: java.lang.String getString()> -> _SOURCE_
<com.raysmond.blog.controllers.TagController: java.lang.String getString()> -> _SOURCE_
<org.springframework.security.web.context.HttpRequestResponseHolder: javax.servlet.http.HttpServletRequest getRequest()> -> _SOURCE_
<org.springframework.security.web.context.HttpRequestResponseHolder: javax.servlet.http.HttpServletResponse getResponse()> -> _SOURCE_
<org.springframework.web.filter.OncePerRequestFilter: java.lang.String getAlreadyFilteredAttributeName()> -> _SOURCE_
<org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter: java.lang.String getString()> -> _SOURCE_
<org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()> -> _SOURCE_
<com.raysmond.blog.admin.controllers.AdminController: com.raysmond.blog.forms.SettingsForm getSettingsFormInstance()> -> _SOURCE_
<com.raysmond.blog.WebConfig: org.springframework.web.servlet.config.'annotation'.ViewControllerRegistry getViewControllerRegistryInstance()> -> _SOURCE_
<org.springframework.security.core.context.SecurityContextImpl: org.springframework.security.core.Authentication getAuthentication()> -> _SOURCE_

<synthetic.method.TagRepositoryImpl: com.raysmond.blog.models.Tag findByName(java.lang.String)> -> _SINK_
<synthetic.method.SettingRepositoryImpl: com.raysmond.blog.models.Setting findByKey(java.lang.String)> -> _SINK_
<synthetic.method.SettingRepositoryImpl: java.lang.Object save(java.lang.Object)> -> _SINK_
